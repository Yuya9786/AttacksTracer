package malwaresimulator

import akka.actor.typed.ActorSystem
import akka.util.Timeout
import malwaresimulator.engine.Initiator
import malwaresimulator.solvers.Solver

import scala.concurrent.duration._
import malwaresimulator.proto.{AddApplicationRequest, AddNetworkRequest, AddNodeRequest, AddRouteReply, AddRouteRequest, Application, InfectRequest, MakeConnectionRequest, Node, SendPacketReply, SendPacketRequest, UpdateNodeInfoRequest}

import scala.concurrent.Future

class MalwareSimulatorServerImpl(val theSystem: ActorSystem[Initiator.Command], val solver: Solver) extends proto.MalwareSimulator {
  implicit val timeout: Timeout = 3.seconds
  implicit val system: ActorSystem[Initiator.Command] = theSystem
  implicit val ec = system.executionContext

  override def addNode(in: AddNodeRequest): Future[proto.Node] =
    solver.addNode(in.name)

  override def updateNodeInfo(in: UpdateNodeInfoRequest): Future[Node] =
    solver.updateNodeInfo(in.id)

  override def addNetwork(in: AddNetworkRequest): Future[proto.Network] =
    solver.addNetwork(in.name, in.address, in.subnetMask)

  override def addApplication(in: AddApplicationRequest): Future[proto.Application] =
    solver.addApplication(in.name, in.nodeID)

  override def makeConnection(in: MakeConnectionRequest): Future[proto.Network] =
    solver.makeConnection(in.nodeID, in.networkID, in.address, in.subnetMask)

  override def infect(in: InfectRequest): Future[proto.Node] = {
    Future {
      proto.Node(3, "hoge")
    }
  }

  override def addRoute(in: AddRouteRequest): Future[AddRouteReply] =
    solver.addRoute(in.nodeID, in.dstAddress, in.mask, in.nexthop, in.netID)

  override def sendPacket(in: SendPacketRequest): Future[SendPacketReply] =
    solver.sendPacket(in.appID, in.srcAddress, in.srcPort, in.dstAddress, in.dstPort, in.data)
}
