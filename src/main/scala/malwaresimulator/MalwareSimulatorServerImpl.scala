package malwaresimulator

import akka.actor.typed.{ActorRef, ActorSystem}
import akka.actor.typed.scaladsl.AskPattern._
import akka.util.Timeout
import malwaresimulator.engine.Initiator
import malwaresimulator.solvers.Solver
import scala.concurrent.duration._
import malwaresimulator.proto.{AddApplicationRequest, AddNetworkRequest, AddNodeRequest, Application, InfectRequest, MakeConnectionRequest}

import scala.concurrent.Future
import scala.util.{Failure, Success}

class MalwareSimulatorServerImpl(val theSystem: ActorSystem[Initiator.Command], val solver: Solver) extends proto.MalwareSimulator {
  implicit val timeout: Timeout = 3.seconds
  implicit val system: ActorSystem[Initiator.Command] = theSystem
  implicit val ec = system.executionContext

  override def addNode(in: AddNodeRequest): Future[proto.Node] =
    solver.addNode(in.name)

  override def addNetwork(in: AddNetworkRequest): Future[proto.Network] =
    solver.addNetwork(in.name, in.address, in.subnetMask)

  override def addApplication(in: AddApplicationRequest): Future[proto.Application] =
    solver.addApplication(in.name, in.nodeId)

  override def makeConnection(in: MakeConnectionRequest): Future[proto.Network] =
    solver.makeConnection(in.nodeId, in.networkId, in.address, in.subnetMask)

  override def infect(in: InfectRequest): Future[proto.Node] = {
    Future {
      proto.Node(3, "hoge")
    }
  }
}
