//package malwaresimulator
//
//import scala.concurrent.ExecutionContext
//import scala.concurrent.Future
//import scala.concurrent.duration._
//import scala.util.{Failure, Success}
//
//import akka.actor.typed.ActorSystem
//import akka.grpc.scaladsl.{ServerReflection, ServiceHandler}
//import akka.http.scaladsl.Http
//import akka.http.scaladsl.model.HttpRequest
//import akka.http.scaladsl.model.HttpResponse
//
//
//object MalwareSimulatorServer {
//
//  def start(interface: String, port: Int, system: ActorSystem[_], grpcService: proto.MalwareSimulator): Unit = {
//    implicit val sys: ActorSystem[_] = system
//    implicit val ec: ExecutionContext = system.executionContext
//
//    val service: HttpRequest => Future[HttpResponse] =
//      ServiceHandler.concatOrNotFound(
//        proto.MalwareSimulatorHandler.partial(grpcService),
//        ServerReflection.partial(List(proto.MalwareSimulator))
//      )
//
//    val bound =
//      Http()
//        .newServerAt(interface, port)
//        .bind(service)
//        .map(_.addToCoordinatedShutdown(3.seconds))
//
//    bound.onComplete {
//      case Success(binding) =>
//        val address = binding.localAddress
//        system.log.info(
//          "MalwareSimulator at gRPC server {}:{}",
//          address.getHostString,
//          address.getPort
//        )
//        println(
//          "MalwareSimulator at gRPC server {}:{}",
//          address.getHostString,
//          address.getPort
//        )
//      case Failure(ex) =>
//        system.log.error("Failed to bind gRPC endpoint, terminating system", ex)
//        system.terminate()
//    }
//  }
//}
