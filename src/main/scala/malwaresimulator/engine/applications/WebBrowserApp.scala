//package malwaresimulator.engine.applications
//
//import akka.actor.typed.{ActorRef, Behavior, RecipientRef}
//import akka.actor.typed.scaladsl.Behaviors
//import malwaresimulator.engine.core.{Message, Http, InetAddress}
//
//import scala.collection.mutable.ListBuffer
//
//
//class WebBrowserApp(node: ActorRef[Message.NodeCommand], operator: ActorRef[Operation]) extends ApplicationNode(node) {
//  val name = "Web Browser"
//
//  override def response(): Behavior[Message.ApplicationCommand] = {
//    import Message._
//    Behaviors.receive { (context, message) =>
//      message match {
//        case OpenedSocket(s) =>
//          socket = Some(s)
//          Behaviors.same
//        case SendRequest(dstAddress: InetAddress) =>
//          socket match {
//            case Some(s) =>
//              val payload = Http(Map("request" -> "GET"), null)
//              node ! SendTo(s, payload, dstAddress, payload.defaultProtocolPort)
//              Behaviors.same
//            case None =>
//              println("[ERR] Socket Not found.")
//              Behaviors.same
//          }
//        case RecvFrom(s, data, option, srcAddress, srcPort) =>
//          data match {
//            case http: Http if http.headersMap.contains("response") => {
//              val result = s"${name} received a http response and a option [" + option + "]."
//              println(result)
//              // リダイレクトであれば，リダイレクトを行う
////              http.headersMap.get("redirect") match {
////                case Some(address) => { sendRequest(InetAddress(address)); return }
////              }
//              http.body match {
//                case page: (Any => Any) =>
//                  val output = page(this)
//                  println(s"output: $output")
//                  Behaviors.same
//                case page: String =>
//                  println(page)
//                  operator ! ResultSendRequest(page)
//                  Behaviors.same
//                case _ =>
//                  println("[ERR] Unknown option.")
//                  Behaviors.same
//              }
//            }
//            case _ =>
//              println("[ERR] Not http.")
//              Behaviors.same
//          }
//      }
//    }
//  }
//}
//
//object WebBrowserApp {
//  def apply(node: ActorRef[Message.NodeCommand], operator: ActorRef[Operation]): Behavior[Message.ApplicationCommand] = {
//    println("[INFO] WebServerApp started.")
//    val browser = new WebBrowserApp(node, operator)
//    Behaviors.setup { context =>
//      browser.node ! Message.SocketOpen(context.self)
//      browser.response()
//    }
//  }
//}
