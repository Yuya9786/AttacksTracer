package malwaresimulator.engine.core

import akka.actor.typed.ActorRef
import akka.pattern.StatusReply
import malwaresimulator.engine.networks.NodeAddress
import malwaresimulator.engine.nodes.{FirewallRule, Socket}
import malwaresimulator.proto

import scala.collection.mutable.ListBuffer

object Message {
  trait Command

  trait NetworkCommand extends Command
  final case class AddNode(replyTo: ActorRef[StatusReply[_]], node: ActorRef[NodeCommand], address: InetAddress) extends NetworkCommand
  final case class RemoveNode(node: ActorRef[NodeCommand], address: InetAddress) extends NetworkCommand
  final case class ShowNode(replyTo: ActorRef[ApplicationCommand]) extends NetworkCommand
  final case class Nodes(list: ListBuffer[NodeAddress]) extends ApplicationCommand
  final case class ShowNetwork(replyTo: ActorRef[StatusReply[proto.Network]]) extends NetworkCommand
  final case class StopNetwork() extends NetworkCommand

  trait NodeCommand extends Command
  final case class SocketSys(replyTo: ActorRef[StatusReply[_]], actor: ActorRef[ApplicationCommand], socket: String) extends NodeCommand
  final case class BindSys(replyTo: ActorRef[StatusReply[_]], socket: String, localAddress: InetAddress, localPort: Int) extends NodeCommand
  final case class ConnectSys(replyTo: ActorRef[StatusReply[_]], socket: String, dstAddress: InetAddress, dstPort: Int) extends NodeCommand
  final case class SendSys(replyTo: ActorRef[StatusReply[_]], socket: String, data: Data, dstAddress: InetAddress, dstPort: Int) extends NodeCommand
  final case class RecvSys(replyTo: ActorRef[StatusReply[Datagram]], socket: String) extends NodeCommand
  final case class MakeConnection(replyTo: ActorRef[StatusReply[_]], address: InetAddress, netmask: Int, net: ActorRef[NetworkCommand]) extends NodeCommand
  final case class MakeConnectionSuccess(replyTo: ActorRef[StatusReply[_]], address: InetAddress, netmask: Int, net: ActorRef[NetworkCommand]) extends NodeCommand
  final case class MakeConnectionFailure(replyTo: ActorRef[StatusReply[_]], exception: Throwable) extends NodeCommand
  final case class ShowConnections(replyTo: ActorRef[ApplicationCommand]) extends NodeCommand
  final case class ConnectionsList(conList: ListBuffer[Connection]) extends ApplicationCommand
  final case class AddRule(newRule: FirewallRule) extends NodeCommand
  final case class UpdateNodeInfo(replyTo: ActorRef[StatusReply[proto.Node]], id: Int) extends NodeCommand
  final case class StopNode() extends NodeCommand

  trait ExecutableNodeCommand extends NodeCommand
  final case class SetApplication(replyTo: ActorRef[StatusReply[_]], id: Int, name: String) extends ExecutableNodeCommand
  final case class SetWebServer(id: Int, name: String, actorRef: ActorRef[ApplicationCommand]) extends ExecutableNodeCommand
  final case class SetWebBrowser(id: Int, name: String, actorRef: ActorRef[ApplicationCommand]) extends ExecutableNodeCommand
  final case class ApplicationRef(ref: ActorRef[ApplicationCommand]) extends NodeCommand
  final case class GetApplications(replyTo: ActorRef[AnyRef]) extends ExecutableNodeCommand
  final case class Applications(applications: ListBuffer[ActorRef[ApplicationCommand]])
  final case class Infect(replyTo: ActorRef[StatusReply[_]], name: String, malware: ActorRef[ApplicationCommand], ccServer: InetAddress) extends NodeCommand

  trait RoutingNodeCommand extends NodeCommand
  final case class GetRoutingTable(replyTo: ActorRef[Command]) extends RoutingNodeCommand
  final case class RoutingTable(rtable: RoutingTable) extends RoutingNodeCommand
  final case class AddRoute(replyTo: ActorRef[StatusReply[_]], dst: InetAddress, netmask: Int, nexthop: InetAddress, net: ActorRef[NetworkCommand]) extends RoutingNodeCommand

  trait ApplicationCommand extends NodeCommand
  final case class SetNode(nodeRef: ActorRef[NodeCommand]) extends ApplicationCommand
  final case class SendApp(replyTo: ActorRef[StatusReply[_]], socket: String, dstAddress: InetAddress, port: Int, data: Data) extends ApplicationCommand
  final case class SendSuccess(replyTo: ActorRef[StatusReply[_]]) extends ApplicationCommand
  final case class SendFailure(replyTo: ActorRef[StatusReply[_]], ex: Throwable) extends ApplicationCommand
  final case class SetAction(action: Unit) extends ApplicationCommand
  final case class SocketApp(replyTo: ActorRef[StatusReply[_]], socket: String) extends ApplicationCommand
  final case class SocketSuccess(socket: String, replyTo: ActorRef[StatusReply[_]]) extends ApplicationCommand
  final case class SocketFailure(ex: Throwable, replyTo: ActorRef[StatusReply[_]]) extends ApplicationCommand
  final case class BindApp(replyTo: ActorRef[StatusReply[_]], socket: String, address: InetAddress, port: Int) extends ApplicationCommand
  final case class BindSuccess(replyTo: ActorRef[StatusReply[_]], socket: String) extends ApplicationCommand
  final case class BindFailure(replyTo: ActorRef[StatusReply[_]], ex: Throwable) extends ApplicationCommand
  final case class ConnectApp(replyTo: ActorRef[StatusReply[_]], socket: String, dstAddress: InetAddress, dstPort: Int) extends ApplicationCommand
  final case class ConnectSuccess(replyTo: ActorRef[StatusReply[_]], socket: String) extends ApplicationCommand
  final case class ConnectFailure(replyTo: ActorRef[StatusReply[_]], ex: Throwable) extends ApplicationCommand
  final case class RecvApp(replyTo: ActorRef[StatusReply[Datagram]], socket: String) extends ApplicationCommand
  final case class RecvSuccess(replyTo: ActorRef[StatusReply[Datagram]], data: Datagram) extends ApplicationCommand
  final case class RecvFailure(replyTo: ActorRef[StatusReply[Datagram]], ex: Throwable) extends ApplicationCommand
  final case class StopApp() extends ApplicationCommand
}
