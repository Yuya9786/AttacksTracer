package malwaresimulator.engine.core

case class InetAddress(octet1: Byte, octet2: Byte, octet3: Byte, octet4: Byte) {
  /**
   *  同じネットワークか調べる
   *  @return 同じネットワークなら true それ以外なら false
   *  @param  address 比較するアドレス
   */
  def isSameNetwork(address: InetAddress, mask: Int): Boolean = {
    if (mask == 0) {
      return true
    }
    val shift = 32 - mask
    ((this.toLongAddress >>> shift) << shift) == ((address.toLongAddress >>> shift) << shift)
  }

  def toLongAddress: Int = {
    (octet1 & 0xff) << 24 | (octet2 & 0xff) << 16 | (octet3 & 0xff) << 8 | (octet4 & 0xff)
  }

  override def toString: String =
    s"${octet1 & 0xff}.${octet2 & 0xff}.${octet3 & 0xff}.${octet4 & 0xff}"

}

object InetAddress {
  val Default = InetAddress(0, 0, 0, 0)

  def apply(): InetAddress = Default

  def apply(ipAddress: String): InetAddress = {
    val octets: Array[Int] = ipAddress.split("\\.").map(s => s.toInt)
    require(octets.size == 4)
    octets.foreach(s => {
      require(0 <= s && s < 256)
    })
    InetAddress(octets(0).toByte, octets(1).toByte, octets(2).toByte, octets(3).toByte)
  }

}