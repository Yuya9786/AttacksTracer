package malwaresimulator.engine.nodes

import akka.actor.typed.ActorRef
import malwaresimulator.engine.{ActorType, TraceLogger}
import malwaresimulator.engine.core.{Datagram, InetAddress, Message}

/**
 * 観戦可能なノードのトレイト
 */
trait ExecutableNode extends NetworkNode {
  private var infectable = true // 感染可能か
  private var malwares: Map[String, ActorRef[Message.ApplicationCommand]] = Map.empty
  private var apps: Seq[malwaresimulator.proto.Application] = Seq.empty

  def setApplication(id: Int, name: String): Unit = {
    apps = apps :+ malwaresimulator.proto.Application(id, name)
  }

  def getApplications(): Seq[malwaresimulator.proto.Application] = apps

  override protected def receiveDatagram(d: Datagram): Unit = {
    executableResponse(d)
    sendAllMalware(d)
  }

  /**
   * 登録してあるアプリケーションにデータグラムのデータ部分を送信
   * @param context
   * @param d
   */
  private def executableResponse(d: Datagram): Unit = {
    sockets.sockets.find(s => (s._2.localAddress == InetAddress.Default || s._2.localAddress == d.dstAddress) && s._2.localPort == d.dstPort) match {
      case Some(s) =>
        s._2.buffer += d
      case None =>
        TraceLogger.info(ActorType.Node, this.name, "drop", d)
    }
  }

  /**
   * 感染している全てのマルウェアにデータグラムを送信
   */
  def sendAllMalware(d: Datagram): Unit = {
//    malwares.foreach(m => m ! d)
  }

  /**
   * 感染可能か否かを設定
   * @param f trueの時感染可能，それ以外の時感染不可能
   */
  def setInfectable(f: Boolean): Unit = infectable = f

  /**
   * 感染可能か否かを取得
   * @return  感染可能な時 true, それ以外の時 false
   */
  def getInfectable(): Boolean = infectable

  /**
   * 感染しているかどうか返す
   * @param m
   * @return 感染している時true,
   */
  def infected(malwareName: String): Boolean = malwares.isDefinedAt(malwareName)

  /**
   * 感染しているマルウェアをリストで返す
   */
  def getMalwares(): List[ActorRef[Message.ApplicationCommand]] = malwares.values.toList

  def infection(malwareName: String, malwareRef: ActorRef[Message.ApplicationCommand]): Unit = {
    if (getInfectable() == true) {
      // 既に同じマルウェアに感染していなかったら感染する
      if (malwares.contains(malwareName) == false) {
        malwares += malwareName -> malwareRef
        println(s"${malwareName} infected now")
      }
    }
  }
}


// ダイナミックポート生成
object PortNumberGenerator {
  var port = 10000

  def next: Int = {
    port += 1
    port
  }
}