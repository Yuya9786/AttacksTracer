package malwaresimulator.engine.nodes

import malwaresimulator.engine.TraceLogger
import malwaresimulator.engine.core.{Connection, Datagram, InetAddress}

import scala.collection.mutable.ListBuffer

abstract case class RoutingTable() {
  abstract val name: String
  case class Route(network: InetAddress, netmask: Int, nexthop: InetAddress, connection: Connection)
  private var table: ListBuffer[Route] = ListBuffer.empty
  // デフォルト経路
  val defaultRoute = InetAddress.Default // 0.0.0.0/0 にセットする

  /**
   *  経路を追加する
   *  @param dest 宛先アドレス
   *  @param gw   ゲートウェイ
   *  @param con  接続
   */
  def addRoute(dest: InetAddress, netmask: Int, nexthop: InetAddress, con: Connection): this.type = {
    table += Route(dest, netmask, nexthop, con)
    this
  }

  /**
   *  経路を削除する
   *  @param dest 削除する宛先アドレス
   */
  def removeRoute(dest: InetAddress): Unit = {
    // table -= table.filter(_._1 == dest).head
    table.find(r => dest.isSameNetwork(r.network, r.netmask)) match {
      case Some(r) => table -= r
      case _ => TraceLogger.error(this.name, s"Not fond table for ${dest.toString}")
    }
  }

  /**
   *  データグラムから検索して経路を得る
   *  @param d データグラム
   *  @return (ゲートウェイ, 接続)
   */
  def routing(d: Datagram): Either[Route, String] = {
    routing(d.dstAddress)
  }

  /**
   *  アドレスから検索して経路を得る
   *  @param dest 宛先アドレス
   *  @return     (ゲートウェイ，接続)
   */
  def routing(dest: InetAddress): Either[Route, String] = {
    // destの所属するネットワークが登録されている場合
    table.find(item => { dest.isSameNetwork(item.network, item.netmask) }) match {
      // 見つかればgwとconnectionを返す
      case Some(route) => Left(route)
      case None => {
        table.find(item => { item.network == defaultRoute && item.netmask == 0 }) match {
          case Some(route) => Left(route)
          case _ => {
            TraceLogger.error(this.name, "Can't get the route.")
            TraceLogger.error(this.name, s"dest=$dest" )
            display()
            Right("Can't get the route")
          }
        }
      }
    }
  }

  /**
   *  ルーティングを表示する
   */
  def display(): Unit = {
    TraceLogger.info(this.name, "Dest.\t\tNexthop\t\tConnection")
    table.foreach(item => {
      TraceLogger.info(this.name, s"${item.network}/${item.netmask}\t${item.nexthop}\t${item.connection}")
    })
  }

}
