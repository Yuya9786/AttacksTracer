package malwaresimulator.engine

import akka.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit
import malwaresimulator.engine.applications.{WebBrowserApp, WebServerApp}
import malwaresimulator.engine.core.{Http, InetAddress, Message}
import malwaresimulator.engine.networks.Network
import malwaresimulator.engine.nodes.{FirewallRule, Node}
import org.scalatest.wordspec.AnyWordSpecLike

import scala.concurrent.duration.DurationInt

class FirewallTest extends ScalaTestWithActorTestKit with AnyWordSpecLike {
  import Message._
  "Firewall actor" must {
    "deny a specific Datagram" in {
      val probe = createTestProbe[Command]()
      val lan0 = spawn(Network(1, "lan0", InetAddress("7.7.7.0"), 24))
      val lan1 = spawn(networks.Network(2, "lan1", InetAddress("8.8.8.0"), 24))

      val firewall = spawn(Node(2, "firewall0", InetAddress("7.7.7.1")))
      val node0 = spawn(Node(3, "node0", InetAddress("8.8.8.2")))

      val webServer = spawn(WebServerApp(5, node0), "webServer")
      node0 ! SetWebServer(5, "webServer", webServer)

      firewall ! MakeConnection(InetAddress("7.7.7.1"), 24, lan0)
      firewall ! MakeConnection(InetAddress("8.8.8.1"), 24, lan1)
      node0 ! MakeConnection(InetAddress("8.8.8.2"), 24, lan1)

      lan0 ! AddNode(firewall, InetAddress("7.7.7.1"))
      lan1 ! AddNode(firewall, InetAddress("8.8.8.1"))
      lan0 ! AddNode(probe.ref, InetAddress("7.7.7.2"))
      lan1 ! AddNode(node0, InetAddress("8.8.8.2"))

      Thread.sleep(3000)

      node0 ! Http(Map("request" -> "GET"), null).datagram(InetAddress("7.7.7.2"), 5555, InetAddress("8.8.8.2"))

      probe.expectMessage(Http(Map("response" -> "OK"), "Test Page.").datagram(InetAddress("8.8.8.2"), 80, InetAddress("7.7.7.2"), 5555))

      firewall ! AddRule(FirewallRule("deny", InetAddress("8.8.8.2"), 80, InetAddress("7.7.7.2"), 5555))

      Thread.sleep(3000)

      node0 ! Http(Map("request" -> "GET"), null).datagram(InetAddress("7.7.7.2"), 5555, InetAddress("8.8.8.2"))

      probe.expectNoMessage(200.millis)
    }
  }
}
