//package malwaresimulator.engine.applications
//
//import akka.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit
//import akka.actor.typed.ActorRef
//import malwaresimulator.engine.core.Network
//import malwaresimulator.engine.core.Network.AddNode
//import malwaresimulator.NodeManager.NodeManagerCommand
//import malwaresimulator.engine.core.{Datagram, Http, InetAddress}
//import malwaresimulator.engine.nodes.Node
//import malwaresimulator.engine.nodes.Node.{ApplicationCommand, ApplicationRef, MakeConnection, NodeCommand, ResultSendRequest, SendRequest, SetNode, SetWebBrowser, SetWebServer, SocketOpen}
//import org.scalatest.wordspec.AnyWordSpecLike
//
//class WebServerTest extends ScalaTestWithActorTestKit with AnyWordSpecLike {
//
//  "WebServer actor" must {
//    "reply Datagram via Network" in {
//      val probe = createTestProbe[NodeCommand]()
//      val network = spawn(Network(0, "network1", InetAddress("10.0.0.0"), 24))
//      val node = spawn(Node(1, "computer1", InetAddress("10.0.0.3")))
//      node ! MakeConnection(InetAddress("10.0.0.3"), 24, network)
//
//      network ! AddNode(probe.ref, InetAddress("10.0.0.2"))
//      network ! AddNode(node, InetAddress("10.0.0.3"))
////      node ! SetApplication(WebServerApp(), "WebServer")
//      val webServer = spawn(WebServerApp(node))
//      node ! SetWebServer(2, "WebServer", webServer)
//
//      Thread.sleep(3000)
//      node ! Http(Map("request" -> "GET"), null).datagram(InetAddress("10.0.0.2"), 5555, InetAddress("10.0.0.3"))
//
//      probe.expectMessage(Http(Map("response" -> "OK"), "Test Page.").datagram(InetAddress("10.0.0.3"), 80, InetAddress("10.0.0.2"), 5555))
//    }
//  }
//
//  "reply Datagram from WebBrowser via Network" in {
//    val probe = createTestProbe[NodeCommand]()
//    val network = spawn(Network(0, "network", InetAddress("10.0.0.0"), 24))
//    val node1 = spawn(Node(1, "computer1", InetAddress("10.0.0.3")))
//    val node2 = spawn(Node(2, "computer2", InetAddress("10.0.0.4")))
//    node1 ! MakeConnection(InetAddress("10.0.0.3"), 24, network)
//    node2 ! MakeConnection(InetAddress("10.0.0.4"), 24, network)
//    network ! AddNode(probe.ref, InetAddress("10.0.0.2"))
//    network ! AddNode(node1, InetAddress("10.0.0.3"))
//    network ! AddNode(node2, InetAddress("10.0.0.4"))
//
//    val webServer = WebServerApp(node1)
//    node1 ! SetWebServer(3, "WebServer", webServer)
//
//    val webBrowser = WebBrowserApp(node2, probe.ref)
//    node2 ! SetWebBrowser(4, "WebBrowser", webBrowser)
//    val response1 = probe.receiveMessage()
//    val browser = response1.asInstanceOf[ApplicationRef].ref
//    browser.isInstanceOf[ActorRef[ApplicationCommand]] should === (true)
//
//    browser ! SendRequest(InetAddress("10.0.0.3"))
//
//    probe.expectMessage(ResultSendRequest("Test Page."))
//  }
//}
