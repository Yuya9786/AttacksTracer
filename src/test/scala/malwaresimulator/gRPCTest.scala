package malwaresimulator

import akka.actor.typed.ActorSystem
import akka.actor.typed.scaladsl.Behaviors
import akka.grpc.GrpcClientSettings
import akka.stream.scaladsl.Source
import .WholeNetwork
import malwaresimulator.proto.{AddNodeRequest, MalwareSimulatorClient}
import org.scalatest.concurrent.ScalaFutures
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

import scala.concurrent.duration._

class gRPCTest extends AnyWordSpec with ScalaFutures with Matchers {
  implicit val patience: PatienceConfig = PatienceConfig(scaled(5.seconds), scaled(100.millis))

  val serverSys: ActorSystem[MalwareSimulatorSupervisor.Operation] = ActorSystem(MalwareSimulatorSupervisor.apply, "MalwareSimulatorTest")
  val grpcInterface =
    serverSys.settings.config.getString("malware-simulator.grpc.interface")
  val grpcPort =
    serverSys.settings.config.getInt("malware-simulator.grpc.port")
  val grpcService = new MalwareSimulatorServerImpl(serverSys)
  MalwareSimulatorServer.start(grpcInterface, grpcPort, serverSys, grpcService)

  implicit val clientSystem: ActorSystem[_] = ActorSystem(Behaviors.empty, "GreeterClient")
  val client = MalwareSimulatorClient(GrpcClientSettings.connectToServiceAt("localhost", 8101))

  "MalwareSimulatorServer" should {
    "reply to single request" in {
      println("A client send AddNodeRequest.")
      val reply = client.addNode(AddNodeRequest("node1", "10.0.0.1"))
      reply.futureValue should ===(WholeNetwork(List.empty))
    }
  }
}

